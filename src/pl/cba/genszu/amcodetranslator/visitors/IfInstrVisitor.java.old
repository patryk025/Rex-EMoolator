package pl.cba.genszu.amcodetranslator.visitors;

import pl.cba.genszu.amcodetranslator.antlr.*;
import pl.cba.genszu.amcodetranslator.antlr.AidemMediaParser.*;
import org.antlr.v4.runtime.tree.*;

public class IfInstrVisitor.java extends AidemMediaBaseVisitor<Void>
{

	@Override
	public Void visitChildren(RuleNode node)
	{
		System.out.println("Fire of visitChildren with node "+node.getRuleContext().getText()+", type: "+node.getRuleContext().getClass().getSimpleName());
		return super.visitChildren(node);
	}

	@Override
	public Void visitScript(AidemMediaParser.ScriptContext ctx)
	{
		System.out.println("We are in script");
		return super.visitScript(ctx);
	}

	@Override
	public Void visitCodeBlock(AidemMediaParser.CodeBlockContext ctx)
	{
		System.out.println("We are in script");
		return super.visitCodeBlock(ctx);
	}
	 
    @Override
    public Void visitIfInstr(AidemMediaParser.IfInstrContext ctx) {
        System.out.println("Found ifInstr!");
        for (AidemMediaParser.ParamContext param : ctx.param()) {
            String type = "";
            String value = "";
            if (param.string() != null) {
                // Obsłuż wywołanie funkcji w stringu
                String stringWithFunction = param.string().getText();
                if (stringWithFunction.startsWith("functionFire")) {
                    type = "functionFire";
                    value = visitFunctionFire(param.string().functionFire().get(0)).toString();
                } else {
                    type = "string";
                    value = param.string().getText();
                }
            } else if (param.number() != null) {
                type = "number";
                value = param.number().getText();
            } else if (param.functionFire() != null) {
                type = "functionFire";
                value = visitFunctionFire(param.functionFire()).toString();
            } else if (param.literal() != null) {
                type = "literal";
                value = param.literal().getText();
            }
            System.out.println("Param: " + value + ", type: " + type);
        }
        return super.visitIfInstr(ctx);
    }
	
	@Override
    public Void visitFunctionFire(AidemMediaParser.FunctionFireContext ctx) {
        // Obsłuż wywołanie funkcji
        /*String functionName = ctx.
        System.out.println("Found function call: " + functionName);*/
        return super.visitFunctionFire(ctx);
    }
}

